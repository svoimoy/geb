cli:
  name: geb
  short: "geb is the Hofstadter framework CLI tool"
  long: |
    Hofstadter is a Framework
    for building data-centric
    Platforms. geb is the tool.
  omit-run: true
  pflags:
    - name: Config
      long: config
      short: c
      type: string
      default: geb.yaml
      help: A geb project config file.
    - name: Design
      long: design
      short: d
      type: string
      default: design
      help: The design files directory.
    - name: TemplatePaths
      long: template-paths
      short: t
      type: string
      default: templates:~/.hofstadter/templates
      help: The search path for templates, reads from left to right, overriding along the way.
    - name: Output
      long: output
      type: string
      short: o
      default: output
      help: The directory to output generated files to.
  commands:
    - name: System
      usage: system
      aliases:
        - sys
        - s
      short: Manage the geb system and congiuration
      long: Manage the geb system and congiuration
      omit-run: true
      subcommands:
        - name: Init
          usage: init
          aliases:
            - initialize
            - setup
          short: Initialize the geb tool and files
          long: Intializes the geb tool and the ~/.hofstadter dot folder.
        - name: DevCopyIn
          usage: dev-copy-in
          short: Copy development files to the dot folder
          long: Copy development files to the dot folder
        - name: Update
          usage: update
          short: Update the geb library and dot folder
          long: Update the geb library DSLs, designs, and other files in the dot folder.

    - name: View
      usage: view
      aliases:
        - v
      short: View information known to the geb tool.
      long: View information known to the geb tool.
      omit-run: true
      subcommands:
        - name: System
          usage: sys <dotpaths>...
          aliases:
            - s
            - system
            - geb
            - config
          short: View information about Global geb config
          long: View information about the global geb config
          args:
            - name: paths
              type: array:string
              rest: true
              help: one ore more dotpaths for indexing into the data
        - name: Dsl
          usage: dsl <dotpath>...
          aliases:
            - d
          short: View information about DSLs
          long: View information about DSLs known from the current path
          args:
            - name: paths
              type: array:string
              rest: true
              help: one ore more dotpaths for indexing into the data
        - name: Gen
          usage: gen <dotpaths>...
          aliases:
            - g
          short: View information about Generators
          long: View information about generators known from the current path
          args:
            - name: paths
              type: array:string
              rest: true
              help: one ore more dotpaths for indexing into the data
        - name: Project
          usage: project <dotpath>...
          aliases:
            - p
            - proj
          short: View information about a Project
          long: View information about a Project known from the current path
          args:
            - name: paths
              type: array:string
              rest: true
              help: one ore more dotpaths for indexing into the data
        - name: Design
          usage: design <dotpath>...
          aliases:
            - D
          short: View information about Designs
          long: View information about Designs known from the current path
          args:
            - name: paths
              type: array:string
              rest: true
              help: one ore more dotpaths for indexing into the data
        - name: Plans
          usage: plans <dotpath>...
          aliases:
            - P
          short: View information about a Project's Plans
          long: View information about a Project's Plans known from the current path
          args:
            - name: paths
              type: array:string
              rest: true
              help: one ore more dotpaths for indexing into the data

    - name: Create
      usage: create <name> <dsl/gen>...
      aliases:
        - new
      short: Create a new project
      long: |
        Create a new project with the given name.
        Optionally specifiy the starting set of
        DSLs and generators for the project.
        The output directory defaults to the same name,
        unless overridden by the output flag.
      args:
        - name: name
          type: string
          required: true
          help: The name of the new project to create
        - name: dsls_n_gens
          rest: true
          type: array:string
          help: The starting list of DSLs and generators by path.

    - name: Gen
      usage: gen
      short: Generate a project.
      long: Generate a project from its working directory.
      subcommands:
        - name: File
          usage: file <designFile> <templateFile> <outputFile>
          short: Generate a file.
          long: Generate a file from design and a template.
          args:
            - name: designFile
              type: string
              required: true
              help: Path to the input design file.
            - name: templateFile
              type: string
              required: true
              help: Path to the template file.
            - name: outputFile
              type: string
              required: true
              help: Path to the output file. Can also be 'stdout'.

    - name: Import
      usage: import <file or directory> <output file or directory>
      aliases:
        - i
        - convert
        - eat
      short: Import other stuff into Hofstadter
      long: |
        Import other stuff into Hofstadter.

        Stuff is...
          - json/jsonl, yaml, xml, protobuf, taml
          - swagger, goa.design
          - golang type definitions
      flags:
        - name: Type
          type: string
          long: type
          short: T
          help: The type of input data to force geb to use a certain format
      args:
        - name: input
          type: string
          required: true
          help: Path to the file or folder. Can also be 'stdin'.
        - name: output
          type: string
          required: true
          help: Path to the output file or folder. Can also be 'stdout'.

    - name: Gebberish
      hidden: true
      omit-run: true
      usage: gebberish
      aliases:
        - games
        - G
      short: "it's a puzzle?!"
      long: Games, shenanigans, and other gebberish.
      subcommands:
        - name: Mi
          usage: mi
          short: View information about a Project's Plans
          long: |
            Welcome to the MI game

            start with mi-string = 'MI'

            mi-rule-1:    if mi-string ends in 'I',        you may add a 'U'
            mi-rule-2:    suppose mi-string = 'Mx',          then you may make it 'Mxx'
            mi-rule-3:    if mi-string contains an 'III',  you may replace it with 'U'
            mi-rule-4:    if mi-string contains a 'UU',    you may drop it (remove it)

            Goal: Try to get 'MU'

            Input:
              - rules, h, help
              - c, curr, current, s, stat, status, get
              - reset, give-up, giveup, start-over, startover
              - 1, r1, rule1, rule-1
              - 2, r2, rule2, rule-2
              - 3, r3, rule3, rule-3 [pos]  (default is last pos)
              - 4, r4, rule4, rule-4 [pos]  (default is last pos)

          args:
            - name: rule
              type: string
              required: true
              help: The rule to apply [r# or rule-#]
            - name: extra
              type: array:string
              rest: true
              help: optional args to rules 3 and 4
