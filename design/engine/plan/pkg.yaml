pkg:
  name: "Plan"
  about: "the Hofstadter engine planning package"

  functions:

    - name: MakePlans
      args:
        - name: dslMap
          type: "map:*engine.dsl.Dsl"
        - name: designData
          type: "map:interface{}"
      return:
        - name: ret
          type: "array:Plan"
        - name: err
          type: error

    - name: MakeSubdesignPlans
      args:
        - name: dslMap
          type: "map:*engine.dsl.Dsl"
        - name: designData
          type: "map:interface{}"
      return:
        - name: ret
          type: "array:Plan"
        - name: err
          type: error


    # this will replace the 4 different planning methods which exist today
    # see engine/plan/todo.md
    - name: makePlans
      args:
        - name: dslKey
          type: string
        - name: genKey
          type: string
        - name: ctxDir
          type: string
        - name: dslCtx
          type: "interface{}"
        - name: designData
          type: "map:interface{}"
        - name: D
          type: "*engine.dsl.Dsl"
        - name: G
          type: "*engine.gen.Generator"
        - name: R
          type: "engine.gen.TemplateConfig"
        - name: makeDesign
          type: bool

      return:
        - name: plans
          type: "array:Plan"
        - name: err
          type: error

    - name: makeProjectPlans
      args:
        - name: dslType
          type: string
        - name: dslCtx
          type: "interface{}"
        - name: dslMap
          type: "map:*engine.dsl.Dsl"
        - name: designData
          type: "map:interface{}"
      return:
        - name: plans
          type: "array:Plan"
        - name: err
          type: error

    - name: makeSubdesignPlans
      args:
        - name: dslType
          type: string
        - name: dslCtx
          type: "interface{}"
        - name: dslMap
          type: "map:*engine.dsl.Dsl"
        - name: designData
          type: "map:interface{}"
      return:
        - name: plans
          type: "array:Plan"
        - name: err
          type: error

    - name: flattenDesignData
      args:
        - name: baseOutputPath
          type: string
        - name: designData
          type: "interface{}"
      return:
        - name: flattened
          type: "map:interface{}"
        - name: err
          type: error

    - name: determineOutfileName
      args:
        - name: outfileTemplateString
          type: string
        - name: renderingData
          type: "interface{}"
        - name: ctxDir
          type: string
      return:
        - name: outputFilename
          type: string
        - name: err
          type: error

    - name: testUnlessConditions
      args:
        - name: unless
          type: string
        - name: localCtx
          type: "interface{}"
      return:
        - name: found
          type: "interface{}"
        - name: err
          type: error

    - name: testWhenConditions
      args:
        - name: when
          type: string
        - name: localCtx
          type: "interface{}"
      return:
        - name: found
          type: "interface{}"
        - name: err
          type: error

